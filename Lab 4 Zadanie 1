using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        List<Shape> shapes = new List<Shape>();

        shapes.Add(new Rectangle(1, 2, 10, 5));
        shapes.Add(new Triangle(3, 4, 8, 6));
        shapes.Add(new Circle(7, 8, 4));

        foreach (var shape in shapes)
        {
            shape.Draw();
        }
    }
}

class Shape
{
    public int X { get; set; }
    public int Y { get; set; }
    public int Height { get; set; }
    public int Width { get; set; }

    public virtual void Draw()
    {
        Console.WriteLine("Drawing a generic shape");
    }
}

class Rectangle : Shape
{
    public Rectangle(int x, int y, int height, int width)
    {
        X = x;
        Y = y;
        Height = height;
        Width = width;
    }

    public override void Draw()
    {
        Console.WriteLine($"Drawing a rectangle at ({X}, {Y}) with height {Height} and width {Width}");
    }
}

class Triangle : Shape
{
    public Triangle(int x, int y, int height, int width)
    {
        X = x;
        Y = y;
        Height = height;
        Width = width;
    }

    public override void Draw()
    {
        Console.WriteLine($"Drawing a triangle at ({X}, {Y}) with height {Height} and base {Width}");
    }
}

class Circle : Shape
{
    public Circle(int x, int y, int radius)
    {
        X = x;
        Y = y;
        Height = radius * 2; 
        Width = radius * 2;  
    }

    public override void Draw()
    {
        Console.WriteLine($"Drawing a circle at ({X}, {Y}) with radius {Height / 2}");
    }
}
